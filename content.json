[{"title":"vim","date":"2017-12-18T03:14:13.950Z","path":"2017/12/18/vim/","text":"vimvim是vi的增加版，在原有的基础上添加了shell语法颜色，便于我们进行排错； vi是UNIX和Linux的标准的编辑器，相等于win上的记事本一样，不仅在功能上不逊色于任何一款编辑器，而且，它在不管在Linux那个版本中的使用都是一样。可以说只要你学了vi，就可以在任何版本的Linux自由畅行； 用法 vim [option] [file...] vim file：文件存在则打开文件，文件不存在则打开一个新文件； vim +# file：打开文件，自动跳转光标到第#行； vim +/pattern file：打开文件，自动跳转光标到第一次匹配到的行； 选项 -o：水平分隔多个文件。如：vim -o file1 file2 ...; -O：垂直分隔多个文件。如：vim -O file1 file2 ...; Ctrl键+w键：来回切换文件； wqa：同时保存多个文件； -d：比较多个文件。如：vim -d file1 file2 ...; -m：以只读的方式打开文件； -b：以二进制方式打开文件； 模式划分vim默认进入的模式就是编辑模式； 1，编辑模式； 2，输入模式； 3，末行模式； 编辑模式当我们vim打开一个文件时直接进入编辑模式，编辑模式功能非常强大，可以实现以下操作： 字符操作h：光标向左移动一个字符； j：光标向下移动一个字符； k：光标向上移动一个字符； l：光标向右移动一个字符； #h：光标向左移动#个字符； #j，#k，#l同上； 单词操作w：光标跳转到下一个单词词首； e：光标跳转到下一个单词词尾； b：光标跳转到当前单词或上一个单词词首； #w：光标跳转到当前单词后第#个单词词首； #e，#b同上； 行操作0：光标跳转到当前行行首； ^：光标跳转到当前行第一个非空字符； $：光标跳转到当前行行尾； 页面操作H：光标跳转到当前屏的第一行行首； M：光标跳转到当前屏的中间行行首； L：光标跳转到当前屏的最后一行行首； 全局操作gg|1G：光标跳转到全文的第一行行首； G：光标跳转到全文的最后一行行首； 字符剪切操作x：剪切光标所在处的字符； X：剪切光标前一个字符； #x：剪切光标往后#个字符； #X：剪切光标往前#个字符； 字符替换操作r：替换光标所在的字符； #r：替换#个字符； 修改操作cc：删除光标所在行，并进入输入模式； C：删除光标所在行，并进入输入模式； 剪切操作dh：剪切光标所在位置的前一个字符； dl同上； dj：剪切光标所在行和下一行； dk同上； dw：剪切光标所在位置到词首； de，db同上； dd：剪切当前行； dgg：剪切当前行到第一行； dG：剪切当前行到最后一行； #dd：剪切当前行以及往下#行； 复制操作yh：复制前一个字符； yl同上； yj：复制当前行以及下一行； yk同上； yw：复制光标所在位置到下一个单词前； ye,yb同上； yy：复制当前行； #yy：复制#行； 粘贴操作p：粘贴复制或剪切的行到下一行，粘贴字符或单词到当前光标后； P：粘贴复制或剪切的行到上一行，粘贴字符或单词到当前光标前； #p|P：粘贴#次； 撤销操作u：撤销上一次操作； #u：撤销#次操作； 替换大小写guu：把当前行换为小写； gUU：把当前行换为大写； #guu：把当前行及以下#-1行换为小写； #gUU：把当前行及以下#-1行换为大写； 可视化操作v：字符选择，以字符为单位作为可视化操作； V：行选择，以行为单位作为可视化操作； Ctrl+v：列选择，以列为单位作为可视化操作； 退出文本ZZ 输入模式输入模式只能从编辑模式进入，可以对文本中的内容进行编辑来实现增加，删除或修改； i：在光标处进入输入模式； I：在当前行首进入输入模式； a：在光标处后一个字符前进入输入模式； A：在当前行行尾进入输入模式； o：在当前行的下方打开新一行进入输入模式； O：在当前行的上方打开新一行进入输入模式； 末行模式末行模式只能从编辑模式进入，可以关闭文件，进行一些特殊的使用； 地址定界.：第一行； $：最后一行； +#：向下#行； %：表示全文； 退出文本:wq：保存退出文本； :q!：不保存退出文本； 读文本到vim:r file：在当前vim中读入一个文件； 将vim写入到文本:w file：将vim中的内容导入到一个文件中； 设置行号:set nu：显示行号； :set nonu：取消行号； 模式匹配搜素/pattern：高亮搜索； n：向下跳转匹配项； N：向上跳转匹配项； :noh：取消高亮搜索； 查找替换:addr1,addr2s@@@gi g：全局替换； i：不区分大小写； vim中执行命令:!command 特殊用法:set paste：设置只是单纯的粘贴；","tags":[{"name":"编辑模式、输入模式、末行模式","slug":"编辑模式、输入模式、末行模式","permalink":"http://yoursite.com/tags/编辑模式、输入模式、末行模式/"}]},{"title":"","date":"2017-11-30T05:47:32.632Z","path":"2017/11/30/用户和组/","text":"用户1，管理员用户（root），UID（0）； 2，普通用户（UID：1-65535） 系统用户：UID，1-500（centos 6），1-1000（centos 7）。对系统进程获取资源进行权限分配； 登录用户：UID，501-65535（centos 6），1001-65535（centos 7）； Linux用户的主要配置/etc/passwd：用户及其属性信息； root:x:0:0:root:/root/:/bin/bash 用户名:口令:uid:gid:注释:家目录:shell类型 用户命令创建用户：useradd； 修改用户： 删除用户：userdel； useradduseradd [options] LOGIN 选项-p：指定用户的密码； useruserdeluserdel [options] username 选项-r：删除用户并一起删除用户的家目录； 组主组： 用户有且只有一个主组，组名同用户名，且只有一个用户； 辅助组： 用户可以有0个或多个辅助组； linux组主要配置组命令用户密码passwd 查看用户id语法id [options]... USER 选项-u：查看用户的uid； -g：查看用户的gid；","tags":[]},{"title":"","date":"2017-11-30T05:47:32.617Z","path":"2017/11/30/权限/","text":"","tags":[]},{"title":"","date":"2017-11-30T05:47:32.617Z","path":"2017/11/30/文本过滤器 - grep/","text":"grep 作用 文本搜索工具，根据用户指定的“模式”对目标文件进行匹配检测，打印匹配到的行； 用法 grep [options] pattern [file] grep选项--color：对匹配到的文本着色显示； -v：把没有匹配到的文本显示出来； -o：只显示匹配到的字符串； -i：忽略大小写； -w：在每一行进行单词的匹配； -q：静默模式，什么也不输出； -c：统计匹配到的行数； -n：显示匹配到的行号； -e：实现多个选项间的逻辑或（or）关系； -E：使用扩展正则表达式； -A #：显示匹配行的后#行（包括匹配行）； -B #：显示匹配行的前#行（包括匹配行）； -C #：显示匹配行的前后各#行（包括匹配行）； grep模式匹配由正则表达式字符及文本字符所编写的过滤条件； 元字符分类 字符匹配，匹配次数，位置锚定，分组； 字符匹配.：匹配任意单个字符； []：匹配指定范围内的任意字符； [^]：匹配指定范围外的任意字符； 匹配次数（贪婪模式）*：匹配前面字符任意次数，包含0次； .*：任意长度的任意字符； \\?：匹配前面字符0次或1次； \\+：匹配前面字符至少1次； \\{n\\}：匹配前面字符n次； \\{m,n\\}：匹配前面字符至少m次，最多n次； \\{m,\\}：匹配前面字符至少m次； \\{,n\\}：匹配前面字符最多n次； 位置锚定^：行首锚定； $：行尾锚定； ^pattern$：用于模式匹配整行； ^$：空行； ^[[:space:]]*$：空白行； \\&lt;或\\b：词首锚定； \\&gt;或\\b：词尾锚定； \\&lt;pattern\\&gt;：用于模式匹配整个单词； 分组\\(\\) 后向引用 egrep 正则表达式分类 基础正则表达式：BRE； 扩展正则表达式：ERE； 用法 egrep [options] pattern [file] egrep选项因grep与egrep除模式匹配外，其他基本一样，所以egrep选项同上； egrep模式匹配由扩展正则表达式字符及文本字符所编写的过滤条件； 元字符分类 字符匹配，匹配次数，位置锚定，分组； 字符匹配.：匹配任意单个字符； []：匹配指定范围内的任意字符； [^]：匹配指定范围外的任意字符； 匹配次数*：匹配前面字符任意次数，包含0次； ?：匹配前面字符0次或1次； +：匹配前面字符至少1次； {n}：匹配前面字符n次； {m,n}：匹配前面字符至少m次，最多n次； 位置锚定^：行首锚定； $：行尾锚定； \\&lt;或\\b：词首锚定； \\&gt;或\\b：词尾锚定； 分组() 逻辑或关系a|b：a或者b； C|cat：C或者cat； (C|c)at：Cat或者cat；","tags":[]},{"title":"","date":"2017-11-30T05:47:32.601Z","path":"2017/11/30/查看CPU、内存、磁盘的占用率/","text":"查看服务器CPU的占用率 top 可以实时的查看系统进程和资源的使用； 查看服务器内存的占用率 free 命令参数 -h：以易阅读的方式显示出来； -m：以MB为单位显示出来； -k：以KB为单位显示出来； -g：以GB为单位显示出来； 查看磁盘的占用率 dh 命令参数 -h：以易阅读的方式显示出来； -m：以MB为单位显示出来； -k：以KB为单位显示出来； -l：只显示本地的文件系统；","tags":[]},{"title":"","date":"2017-11-30T05:47:32.601Z","path":"2017/11/30/行编辑器 - sed/","text":"sed命令默认不编辑原文件，仅对模式空间中的数据进行处理，而后，处理结束后，将模式空间打印至屏幕； sed语法sed [options] &apos;AddressCommand&apos; file ... 选项-n：静默输出，不输出模式空间的内容至屏幕； -r：支持使用扩展正则表达式； -i：编辑原文件（比较危险，请小心使用，可以先备份，再-i编辑）； -e &apos;AddressCommand&apos; -e &apos;AddressCommand&apos;：多点编辑; 地址定界1，#：指定某行； 2，#，+#：指定从第几行开始，到后多少行； 3，#，#：指从第几行到第几行； 4，/pattern/：模式匹配，匹配符合的行显示出来； 5，#，/pattern/：从第几行到第一次匹配到的行； 6，/pattern1/,pattern2/：从第一次匹配到模式1的行，到第一次匹配到模式2的行； 执行命令p：打印模式空间处理过的数据，原数据也一并打印到屏幕上； d：删除模式空间处理过的数据，其余未处理的数据打印到屏幕上； s@@@修饰符：查找替换，默认只替换第一次匹配到的字符串，支持使用其他的替换符号，s///、s###等； 修饰符： g：全局替换； i：忽略字符大小写； 后向引用： \\(\\) &amp;：引用整个模式匹配的条件； i：插入，在匹配行的上面新增一行； 如：sed &apos;/^root/i insert&apos; file a：添加，在匹配行的下面新增一行； 如：sed &apos;/^root/a add&apos; file r：读入一个文件到正在编辑的文件中； 如：sed &apos;^/root/r file&apos; file w：在匹配范围内的行添加到某个文件中； 如：sed &apos;^/root/w file&apos; file","tags":[]},{"title":"","date":"2017-11-30T05:47:32.586Z","path":"2017/11/30/Linux启动流程/","text":"Linux启动流程 启动顺序 centos5：是按顺序启动； centos6：有依赖关系的按顺序一个个启动，没有依赖关系的并行启动； centos7：不管有没有依赖关系，都并行启动； 启动流程 post（加电自检）—device（找第一个启动设备）—MBR—446grupstage1（找到grup的第一个阶段）—stage1.5/bootfilesystem（grup1.5阶段是加载文件系统驱动）—/boot（找到boot分区）—/boot/grup/grup.conf（grup2阶段定义了kernel等）—kernul vmlinuz root=/ （以只读的方式挂载根）—initrd /initramfs（根文件系统的驱动）—init（系统的第一个进程）—/etc/inittab（启动相应的模式）—/etc/rc.d/rc.sysinit（初始化的第一个脚本）—/etc/rcN.d/K,S（关闭和启动服务脚本的软链接）—/etc/init.d/rc.local（兜底文件）—login（登录界面）","tags":[]},{"title":"","date":"2017-11-30T05:47:32.586Z","path":"2017/11/30/Linux文件系统/","text":"文件系统 根文件系统 Linux的根文件系统叫做rootfs（/）； 根下目录介绍 1，/boot：用来存放系统启动相关的文档，如内核，initrd，以及grub等； 2，/dev：设备文件； 块设备：能够随机访问的文件，数据块； 字符设备：线性访问，按字符为单位； 设备号：主设备号（major）和次设备号（minor）； 3，/etc：配置文件； 4，/home：用户的家目录，每一个用户在/home下都有一个与用户名匹配的目录； 5，/root：管理员的家目录； 6，/lib：库文件，只能被调用，不能自动执行； 静态库：.a结尾的文件 动态库：.dll和.so结尾的文件 7，/proc：伪文件系统，内核映射文件； 8，/sys：伪文件系统，跟硬件设备相关的属性映射文件； 9，/opt：可选目录； 10，/mnt：挂载点目录，额外的临时文件系统； 11，/media：挂载点目录，移动设备； 12，/tmp：临时文件； 13，/var：可变化文件； 14，/bin：可执行文件，用户命令； 15，/sbin：管理员命令； 16，/usr：包含所有的共享文件； 文件命名规则 1，文件名不能超过255个字符； 2，文件名不能以/命名； 3，文件名要严格区分大小写；","tags":[]},{"title":"","date":"2017-11-30T05:47:32.586Z","path":"2017/11/30/Linux基础命令/","text":"Linux基础命令 命令分类 1，内置命令：shell内部命令； 2，外部命令：在文件系统的某个路径下有一个与命令名称相对应的可执行文件； type命令查看命令的分类； help命令命令使用帮助； 内置命令使用 help COMMAND 外部命令使用 COMMAND --help man命令命令使用帮助； man章节分类 1，用户命令（/bin;/usr/bin;/usr/local/bin）; 2，系统调用； 3，库用户； 4，特殊文件（设备文件）； 5，文件格式（配置文件的语法） 6，游戏； 7，杂项； 8，管理命令（/sbin;/usr/sbin;/usr/local/sbin）; 命令行语法格式及特殊字符 命令 &lt;必选参数1|必选参数2&gt; [-option {必选参数1|必选参数2|必选参数3|}] [可选参数...] {（默认参数）|参数|参数} 1，&lt;&gt;：必选参数，实际使用时应将他替换为所要使用的参数； 2，{}：必选参数，内部使用，包含此处允许使用的参数； 3，[]：可选参数，在命令中根据需要加以取舍； 4，()：指明参数的默认值，一般用于{}中； 5，…：任意多个参数； 6，|：用于分隔多个互斥的参数，含义“或”，使用时只能选择一个； whatis查看命令在man帮助中使用的章节； env命令显示当前用户的环境变量； export命令显示当前导出成用户变量的shell变量；export LANG=en（设置当前使用的语言为英文） set命令显示当前shell的变量和当前用户的变量； hash命令显示当前已缓存的命令路径，和使用次数； printf命令格式化并输出结果到标准输出； 语法 printf format [argument] 格式（format） \\n：换行； \\t：水平制表符； 时间命令管理date命令查看系统时间； 语法 date [option] ... [+format] 格式（+format） %F：显示年-月-日； %D：显示日/月/年； %T：显示时.分.秒; %y|Y：显示年； %h：显示月； %d：显示日； %H：显示时； %M：显示分； %S：显示秒； %s：显示从从1970年到现在的秒数； clock命令查看硬件时间； 语法 clock [function] [option...] 选项 -w: --systohc以系统时间为准校正硬件时间； -s：--hctosys以硬件时间为准校正系统时间； cal命令查看日历； 目录管理ls命令查看文件； 选项 -l：长格式显示； -h：单位换算，以人类最易看懂的形式显示出来； -d：只显示目录文件； -i：显示文件的inode； -a：显示所有的文件； .：当前目录； ..：当前目录的父目录； -A：除了不显示.和..目录外，其他的都显示； -r：逆序显示； cd命令切换目录； 选项 ~username：进入指定用户的家目录（只root用户可以使用）； -：在当前目录和前一次所在的目录来回切换； pwd命令以绝对路径的形式显示当前所在的目录； mkdir命令创建目录； 语法 mkdir [option]... dir... 选项 -p：递归创建目录； -v：显示详细的执行过程； {}：特殊用法，可以同时创建多个目录，如{a,b}，在当前目录下同时创建a和b； rmdir命令删除空的目录； tree查看目录树； 文件管理touch命令修改文件的时间戳； 语法 touch [option]... file... 选项 -c：不创建文件，当文件存在时改变文件的时间戳； -a：改变文件的访问时间； -m：不改变文件内容，只改变文件的修改时间； -t：指定文件的访问时间和修改时间，时间格式为[[CC]YY]MMDDhhmm[.ss]（年月天时分.秒）； rm命令删除文件或命令； 语法 rm [option]... file... 选项 -r：递归删除文件或目录； -f：不用再次确认删除文件或目录； -v：显示详细的执行过程； stat命令查看文件的属性； 文件的时间戳的分类 1，atime：最近一次访问时间； 2，mtime：最近一次修改时间； 3，ctime：最近一次改变时间（元数据）； file命令查看文件的类型； cp命令备份文件； 语法 cp [option]... SOURCE DEST 选项 -f：强制性的备份文件； -p：备份文件时不改变文件的属主和属组； -d：不改变文件的任何属性； -r|R：递归备份； -a：相当于-dR，归档备份，常用于数据备份； mv命令移动文件或目录； 语法 mv [option]... SOURCE DEST mv -t DEST SOURCE 选项 -f：强制覆盖； -t：先指定目标，再指定源文件； install命令安装或升级软件或备份文件，但是install允许你控制文件的所有属性； 语法 install [option]... SOURCE DEST install [option]... SOURCE... DIRECTORY install -d DIRECTORY install -t DIRECTORY SOURCE 选项 -t：先指定目标目录，再指定源文件； -d：生成目录； 查看文本cat命令 命令格式 cat [option] [file] 参数选项 -n：对显示出来的每一行添加编号； -s：压缩连续的空行为一行； -b：只给文本中非空行编号； -E：对显示出来的每一行结尾加上$； -A：显示文本中所有的控制符； -v：显示文本中的特殊字符； less命令 功能 一页一页的查看文本 查看命令 /匹配项：在文本中搜索与匹配项相同的字符； n键：跳到下一个匹配到的字符； N键：跳到上一个匹配到的字符； q键：退出less； head命令显示文本前行内容； 命令格式 head [option] [file] 参数选项 -#：直接指定要显示的前多少的行数； -n #：显示文本的前#行； -c #：显示文本的前#字节； -f：查看文件头部不退出，等待显示后续追加的内容； tail命令显示文本后行内容； 命令格式 tail [option] [file] 参数选项 -#：直接指定要显示的后多少行的行数； -n #：显示文本的后#行； -c #：显示文本的后#行； -f：查看文件尾部不退出，等待显示后续追加的内容； 文本处理cut命令按列处理文本； 命令格式 cut [option] [file] 参数选项 -d &quot;delimiter&quot;：指定分隔符； -f fields：指明要抽取的列； #：第#列； #，#，#：输出多个不连续的列； #-#：输出连续多个列； sort命令用于文件的排序 命令格式 sort [option] [file] 选项 -n：按数字的大小，从小到大的排序； -r：反向的输出文本的内容； -t：指定分隔符； -k：指定匹配列； -f：排序时不区分大小写； -u：输出时删除重复的行； 注意： 1，sort默认是按照ASCII码表排序； 2，只有连续且完全相同的方为重复行； 命令格式 uniq [option] [file] 命令参数 -c：显示每一行重复的次数； -d：只显示重复过的行； -u：只显示不曾重复过的行； 注意：只有连续且完全相同的方为重复行； wc命令收集文本行数、单词总数、字符总数和字节总数； 命令格式 wc [option] [file] 选项 -l：只统计行总数； -w: 只统计单词总数； -m：相当于-c,只统计字符总数； -c：只统计字节总数； tr命令转换或删除字符； 命令格式 tr [option]... set1 [set2] 选项 -d：删除选定的字符； 注意：转换字符是要注意一一对应； diff命令用于比较两个文件的不同； 命令格式 diff [option]... [file] 选项 -s：显示两个文件的不一样行；","tags":[]},{"title":"","date":"2017-11-30T05:47:32.570Z","path":"2017/11/30/Linux操作系统组成/","text":"Linux操作系统组成 说明 Linux：功能丰富，提供菜单，允许用户选择要启动的操作系统和不同的内核版本。把用户选定的内核装载到内存中的特定空间中，解压、展开，并把系统的控制权移交给内核； Linux组成 Linux=kernel+rootfs 内核内核是一套操作系统的核心，主要包含的模块有：进程管理、内存管理、网络管理、驱动程序、文件系统、安全功能； 内核设计流派 单内核 单内核（monolithic kernel）是把所有的功能集成于同一个程序，如：Linux系统； 微内核 微内核（micro kernel）是每一种功能使用单独的子系统实现，如：Windows、Solaris； Solaris是Sun Microsystems研发的计算机操作系统，是UNIX操作系统的衍生版本之一； 内核特点 支持模块化 支持内核模块的动态装载和卸载 内核组成 核心文件 /boot/vmlinuz-版本号-release 如：/boot/vmlinuz-2.6.32-642.el6.x86_64 ramdisk 2.1 centos5： /boot/initrd- VERSION -release.img 2.2 centos6和7： /boot/initramfs-版本号-release 如：/boot/initramfs-2.6.32-642.el6.x86_64.img 模块文件 /lib/modules/ VERSION -release 如：/lib/modules/2.6.32-642.el6.x86_64 rootfsrootfs：根文件系统，是内核启动时所挂载的第一个文件系统，内核代码映像文件保存在根文件系统中，而系统引导会在根文件系统挂载之后从中把一些基本的初始化脚本和服务等加载到内存中去运行； 应用程序二进制的执行文件 glibcglibc是系统的C函数库。glibc是Linux系统中最低层的API，几乎其它的任何运行库都会依赖于glibc。","tags":[]},{"title":"","date":"2017-11-30T05:47:32.554Z","path":"2017/11/30/bash/","text":"bashbash支持的功能1，命令历史、命令补全； 2，管道和重定向； 3，命令别名； 4，命令行编辑； 5，命令行替换； 6，文件名通配； 7，变量； 8，编程； 命令历史和命令、路径补全命令历史 history命令 查看历史命令； 语法 history [-c] [-d offset] or history -anrw filename or history -ps arg [arg...] 选项 -c：清除所有的历史命令； -d [n]：删除指定历史命令； -w：保存历史命令到某个文件； 使用历史命令技巧 !n：执行历史命令中第n条命令； !-n：执行历史命令中倒数第n条命令； !!：执行上一条命令； !string：执行历史命令中最近一个以指定字符串开头的命令； !$：引用上条命令的最后一个参数； 命令、路径补全 命令补全 搜索PATH环境变量所指定的每个路径下以我们给出的字符串开头的可执行文件，如果多余一个，两次tab，可以给出一个列表。否则将直接补全； 路径补全 搜索我们给出的起始路径下的每个文件名，并试图补全； 重定向和管道 计算机五大组件 运算器、控制器：CPU； 存储器：RAM； 输入|输出设备； 控制器：控制指令； 运算器：计算过程； 存储器： 1，地址总线：内存寻址； 2，数据总线：数据传输； 3，控制总线：指令控制； 寄存器：CPU暂时存储器； 输入|输出设备：输入和输出数据； 程序：指令+数据； 系统设定 1，默认输出设备：标准输出，1； 2，默认输入设备：标准输入，0； 3，标准错误输出：2； 重定向改变文件的输入或输出； &gt;：输出重定向； &gt;&gt;：追加输出重定向； 2&gt;：错误输出重定向； 2&gt;&gt;：错误追加输出重定向； &gt;|：强制输出重定向； &amp;&gt;：重定向所有输出； &lt;：输入重定向； set命令 设置输出重定向的使用和禁止； 选项 -C：当文件中有数据时，禁止使用输出重定向将数据输出到这个文件中； +C：取消-C的使用； 管道|：将前一个命令的输出作为后一个命令的输入； tee 不仅可以保存数据到文件，也可以输出到屏幕上； 语法 tee [option]... [file]... 选项 tee什么也不加，相当于&gt;； -a：相当于&gt;&gt;； 命令别名 alias命令 设置别名； 语法 alias CMDALIAS=&apos;COMMAND [option] [arguments]&apos; 只alias是显示所有的别名； unalias命令 取消别名 语法 unalias CMDALIAS 命令行编辑 光标跳转 Ctrl+a：跳转到行首 Ctrl+e：跳转到行尾； Ctrl+u：删除光标至行首； Ctrl+k：删除光标至行尾； Ctrl+l：清屏； Ctrl+左键：跳转到单词词首； Ctrl+右键：跳转到单词词尾； Ctrl+w：删除光标所在的单词； 命令行替换$(COMMAND)或\\`COMMAND\\` 把命令中的某个子命令替换为其执行结果的替换； bash支持的引号 ``：反引号，命令替换； &quot;&quot;：双引号，弱引用，可以实现变量替换； &apos;&apos;：单引号，强引用，不完成变量替换； 文件名通配（globbing：通配符）*：任意长度的任意字符； ?：任意单个字符； []：匹配指定范围内的任意单个字符； [0-9],[a-z],[A-Z],[0-9a-zA-Z] [[:space:]]：空白字符； [[:punct:]]：标点符号； [[:lower:]]：小写字母； [[:alpha:]]：大写字符； [[:digit:]]：数字； [[:alnum:]]：数字和大小写字母； [^]：匹配非指定范围内的任意单个字符； 变量内存空间，命名空间； 变量分类内部变量、环境变量、用户变量； 内部变量内部变量是Linux所提供的一种特殊类型的变量，这类变量用来在程序中做判断，不能修改； 环境变量Linux环境由许多变量和变量的值组成，这些变量和变量的值就是环境变量。包括两部分： 1，系统设置的； 2，用户用export命令设置的，但是用户注销时将丢失； 用户变量用户自己根据需要所定义的变量； 变量命令 set命令 显示（设置）所有的变量； export命令 显示（设置）环境变量； env命令 显示（设置）用户变量； unset命令 unset VARNAME：取消变量；（所有变量都可以用这个命令） 变量存储类型事先确定变量的存储格式和长度； 类型分类 字符 数值 整数 浮点型 bash变量分类 本地变量 VARNAME=VALUE 只在当前shell有效； 局部变量 local VARNAME=VALUE 只在当前一段代码有效； 环境变量 1，export VARNAME=VALUE 2， VARNAME=VALUE export VARNAME 只在当前shell及其子shell有效； 位置变量 $1：第一个位置变量； $2：第二个位置变量； ... 特殊变量 $0：代表文件本身； $?：上一条命令的返回值； 0：正确执行； 1-255：错误执行，1、2、127为系统预留，有特殊意义，其他的用户可以自己定义； $#：显示参数的个数； $@：显示参数列表； $*：显示参数列表； shift：轮询，当你使用多个参数时，而你只能一次调用一个参数，那么使用shift一次，它会自动跳到下一个参数； 变量注意1，脚本在执行时会启动一个子shell进程； 2，命令行中启动的脚本会继承当前shell的环境变量； 3，系统自动执行的脚本（非命令行启动）就需要自我定义需要的环境变量； 变量命令注意1，不要和系统中已有的环境变量名重名； 2，变量名最好见名知义； 3，变量名只能由字母、数字和下划线来命名，但是不能以数字开头； 编程编程语言：机器语言、汇编语言、高级语言； 高级语言分类 静态语言（编译型语言） 强类型（变量）； 事先转换成可执行格式； C、C++、JAVA、C#； 编译型语言：需要使用编译器来执行； 动态语言（解释型语言） 弱类型（变量）； 边解释边执行； PHP、SHELL、Python、Perl； 解释型语言：需要使用解释器来边解释边执行； 编程风格 面向过程 面向过程是以步骤来划分问题，逐步来解决问题； 面向对象 面向对象是以功能来划分问题，逐步来实现每个功能； bash运算1，算法运算 2，逻辑运算 算法运算加（+）、减（-）、乘（*）、除（/）、取余（%）、乘方（**）； 实现算术运算 A=3 B=5 C=$A+$B 1，let C=$A+$B; 2，C=$[$A+$B] 3，C=$(($A+$B)) 注意乘号（*）有些场景需要转义。转义符：\\； 逻辑运算与、或、非、异或； 0：假； 1：真； 与（&amp;） 1 &amp; 0 = 0 0 &amp; 1 = 0 0 &amp; 0 = 0 1 &amp; 1 = 1 或 0 或 1 = 1 1 或 0 = 1 0 或 0 = 0 1 或 1 = 1 非（!） ! 0 = 1 ! 1 = 0 短路与（&amp;&amp;） 第一个为0 ，结果必定为0； 第一个为1 ，第二个必须要参与运算； cmd1 &amp;&amp; cmd2 cmd1 成功，将执行cmd2； cmd1 失败，将不执行cmd2； 短路或（||） 第一个为1 ，结果必定为1； 第一个为0 ，第二个必须要参与运算； cmd1 成功，将不执行cmd2； cmd1 失败，将执行cmd2； 异或（^） 异或的两个值, 相同为假，不同为真； 0 ^ 1 = 1 1 ^ 0 = 1 0 ^ 0 = 0 1 ^ 1 = 1 条件判断，控制结构单if语句if 判断条件； then statement1 statement2 ... fi 双if语句if 判断条件； then statement1 ... else statement2 ... fi bash如何实现条件判断基于以下三种条件测试类型： 1，整数测试 2，字符串测试 3，文件测试 整数测试-eq：等于，测试两个整数是否相等，等于为真，否则为假； -ne：不等于，测试两个整数是否相等，不相等为真，否则为假； -gt：大于，测试第一个整数是否大于第二个整数，大于为真，否则为假； -lt：小于，测试第一个整数是否小于第二个整数，小于为真，否则为假； -ge：大于等于，测试第一个整数是否大于或等于第二个整数，大于或等于为真，否则为假； -le：小于等于，测试第一个整数是否小于或等于第二个整数，小于或等于为真，否则为假； 字符串测试文件测试-e：测试文件是否存在； -f：测试文件是否为普通文件； -d：测试文件是否为目录文件； -r：测试当前用户对文件是否有读权限； -w：测试当前用户对文件是否有写权限； -x：测试当前用户对文件是否有执行权限； 条件测试的表达式1，[ expression ] 2，[[ expression ]] 3，test expression 注意：中括号中两边必须要有空格；","tags":[]}]